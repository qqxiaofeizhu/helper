(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{179:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h2",{attrs:{id:"递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递归","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),s("p",[t._v("程序不断的调用自身的过程就是递归， 递归相对普通的算法执行效率比较低，还容易造成栈溢出")]),t._v(" "),s("p",[t._v("斐波纳契数列")]),t._v(" "),s("p",[t._v("0、1、2、3、5、8、13、21、34 ...")]),t._v(" "),s("p",[t._v("范式：F(0)=1，F(1)=1, F(n)=F(n-1)+F(n-2)（n>2，n∈N*）")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fibonacci")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fibonacci")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fibonacci")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h2",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),s("h2",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),s("h2",{attrs:{id:"图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图","aria-hidden":"true"}},[t._v("#")]),t._v(" 图")]),t._v(" "),s("h2",{attrs:{id:"树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树","aria-hidden":"true"}},[t._v("#")]),t._v(" 树")]),t._v(" "),s("h3",{attrs:{id:"数据结构中的基本定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构中的基本定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构中的基本定义")]),t._v(" "),s("p",[t._v("树（tree）是包含n（n>=0）个结点的有穷集， 由根结点和若干颗子树构成的。")]),t._v(" "),s("p",[t._v("度：指的是一个节点拥有子节点的个数。如二叉树的节点的最大度为2。")]),t._v(" "),s("p",[t._v("深度：数的层数，根节点为第一层，依次类推。")]),t._v(" "),s("p",[t._v("叶子节点：度为0的节点，即没有子节点的节点。")]),t._v(" "),s("h3",{attrs:{id:"树的种类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树的种类","aria-hidden":"true"}},[t._v("#")]),t._v(" 树的种类")]),t._v(" "),s("p",[t._v("无序树：树中任意节点的子结点之间没有顺序关系，这种树称为无序树,也称为自由树;")]),t._v(" "),s("p",[t._v("有序树：树中任意节点的子结点之间有顺序关系，这种树称为有序树；")]),t._v(" "),s("p",[t._v("二叉树：每个节点最多含有两个子树的树称为二叉树；")]),t._v(" "),s("p",[t._v("满二叉树： 除了叶结点外每一个结点都有左右子叶且叶结点都处在最底层的二叉树,")]),t._v(" "),s("p",[t._v("完全二叉树：只有最下面的两层结点度小于2，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树")]),t._v(" "),s("p",[t._v("平衡二叉树：树的左右子树的高度差不超过1的数，空树也是平衡二叉树的一种")]),t._v(" "),s("p",[t._v("霍夫曼树：带权路径最短的二叉树称为哈夫曼树或最优二叉树；")]),t._v(" "),s("h3",{attrs:{id:"遍历方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历方法")]),t._v(" "),s("p",[t._v("先序遍历，中序遍历，后序遍历, 深度优先遍历，广度优先遍历")])])}],!1,null,null,null);a.default=r.exports}}]);